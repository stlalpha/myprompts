---
- hosts: localhost
  gather_facts: false
  vars:
    brew_formulae: []
    brew_casks: []
    appstore_apps: []
    apt_packages: []
    dnf_packages: []
    pacman_packages: []
    paru_packages: []
    target_os: "{{ target_os | default('unknown') }}"
    package_manager: "{{ package_manager | default('unknown') }}"

  tasks:
    - name: Install Homebrew formulae
      ansible.builtin.command: brew install {{ item }}
      register: brew_install
      changed_when: "'already installed' not in brew_install.stdout"
      loop: "{{ brew_formulae }}"
      become: false
      when:
        - target_os == 'macos'
        - brew_formulae | length > 0

    - name: Install Homebrew casks
      ansible.builtin.command: brew install --cask {{ item }}
      register: brew_cask
      changed_when: "'already installed' not in brew_cask.stdout"
      failed_when:
        - brew_cask.rc != 0
        - "'It seems there is already an App at' not in brew_cask.stderr"
        - "'is unavailable' not in brew_cask.stderr"
      loop: "{{ brew_casks }}"
      become: false
      when:
        - target_os == 'macos'
        - brew_casks | length > 0

    # Note: mas account command is broken on macOS 12+ due to Apple framework changes
    # See: https://github.com/mas-cli/mas/issues/417
    # Users must sign in through Mac App Store app before running installer
    - name: Install Mac App Store apps
      community.general.mas:
        id: "{{ item }}"
        state: present
      loop: "{{ appstore_apps }}"
      become: false
      when:
        - target_os == 'macos'
        - appstore_apps | length > 0
      register: mas_result
      failed_when: false  # Handle failures gracefully since sign-in detection is broken
      ignore_errors: true

    - name: Display App Store installation status
      ansible.builtin.debug:
        msg: |
          {% if mas_result.results is defined %}
          Mac App Store installation results:
          {% for result in mas_result.results %}
          - App ID {{ result.item }}: {% if result.failed | default(false) %}Failed ({{ result.msg | default('Ensure you are signed into Mac App Store') }}){% elif result.changed %}Installed{% else %}Already installed{% endif %}
          {% endfor %}

          Note: You must sign in to the Mac App Store app before installing apps.
          The 'mas account' command is broken on macOS 12+ due to Apple framework changes.
          {% else %}
          Mac App Store apps installation was skipped or had no results.
          {% endif %}
      when:
        - target_os == 'macos'
        - appstore_apps | length > 0
        - mas_result is defined

    # Add Magnet to login items if it exists on the system
    - name: Check if Magnet is installed
      ansible.builtin.stat:
        path: /Applications/Magnet.app
      register: magnet_app
      when: target_os == 'macos'

    - name: Add Magnet to login items
      ansible.builtin.shell: |
        # Check if Magnet is already in login items
        if ! osascript -e 'tell application "System Events" to get the name of every login item' | grep -q "Magnet"; then
          osascript -e 'tell application "System Events" to make login item at end with properties {path:"/Applications/Magnet.app", hidden:false}'
          echo "Added Magnet to login items"
        else
          echo "Magnet already in login items"
        fi
      register: login_item_result
      changed_when: "'Added Magnet to login items' in login_item_result.stdout"
      failed_when: false
      when:
        - target_os == 'macos'
        - magnet_app.stat.exists | default(false)

    - name: Update apt cache
      become: true
      ansible.builtin.command: apt-get update -y
      changed_when: false
      when:
        - target_os == 'linux'
        - package_manager == 'apt'
        - apt_packages | length > 0

    - name: Install apt packages
      become: true
      ansible.builtin.command: apt-get install -y {{ item }}
      register: apt_install
      changed_when: apt_install.rc == 0
      loop: "{{ apt_packages }}"
      when:
        - target_os == 'linux'
        - package_manager == 'apt'
        - apt_packages | length > 0
      notify: Update apt cache

    - name: Install dnf packages
      become: true
      ansible.builtin.command: dnf install -y {{ item }}
      register: dnf_install
      changed_when: dnf_install.rc == 0
      loop: "{{ dnf_packages }}"
      when:
        - target_os == 'linux'
        - package_manager == 'dnf'
        - dnf_packages | length > 0

    - name: Install pacman packages
      become: true
      ansible.builtin.command: pacman -S --noconfirm --needed {{ item }}
      register: pacman_install
      changed_when: "'There is nothing to do' not in pacman_install.stdout"
      loop: "{{ pacman_packages }}"
      when:
        - target_os == 'linux'
        - package_manager == 'pacman'
        - pacman_packages | length > 0

    - name: Install paru packages
      ansible.builtin.command: paru -S --noconfirm --needed {{ item }}
      register: paru_install
      changed_when: "'There is nothing to do' not in paru_install.stdout"
      loop: "{{ paru_packages }}"
      when:
        - target_os == 'linux'
        - package_manager == 'pacman'
        - paru_packages | length > 0

  handlers:
    - name: Update apt cache
      become: true
      ansible.builtin.command: apt-get update -y
      listen: Update apt cache
