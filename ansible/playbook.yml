---
- hosts: localhost
  gather_facts: false
  vars:
    brew_formulae: []
    brew_casks: []
    appstore_apps: []
    apt_packages: []
    dnf_packages: []
    pacman_packages: []
    paru_packages: []
    target_os: "{{ target_os | default('unknown') }}"
    package_manager: "{{ package_manager | default('unknown') }}"

  tasks:
    - name: Install Homebrew formulae
      ansible.builtin.command: brew install {{ item }}
      register: brew_install
      changed_when: "'already installed' not in brew_install.stdout"
      loop: "{{ brew_formulae }}"
      become: false
      when:
        - target_os == 'macos'
        - brew_formulae | length > 0

    - name: Install Homebrew casks
      ansible.builtin.command: brew install --cask {{ item }}
      register: brew_cask
      changed_when: "'already installed' not in brew_cask.stdout"
      failed_when:
        - brew_cask.rc != 0
        - "'It seems there is already an App at' not in brew_cask.stderr"
        - "'is unavailable' not in brew_cask.stderr"
      loop: "{{ brew_casks }}"
      become: false
      when:
        - target_os == 'macos'
        - brew_casks | length > 0

    - name: Ensure mas is available in PATH
      ansible.builtin.shell: |
        if command -v mas >/dev/null 2>&1; then
          echo "found"
        elif [[ -x /opt/homebrew/bin/mas ]]; then
          echo "found"
        elif [[ -x /usr/local/bin/mas ]]; then
          echo "found"
        else
          echo "not found"
        fi
      register: mas_availability
      changed_when: false
      when:
        - target_os == 'macos'
        - appstore_apps | length > 0

    - name: Check if signed into Mac App Store
      ansible.builtin.shell: |
        export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
        if mas account >/dev/null 2>&1; then
          echo "signed in"
        else
          echo "not signed in"
        fi
      register: mas_account
      changed_when: false
      when:
        - target_os == 'macos'
        - appstore_apps | length > 0
        - mas_availability.stdout == "found"

    - name: Install Mac App Store apps
      ansible.builtin.shell: |
        export PATH="/opt/homebrew/bin:/usr/local/bin:$PATH"
        mas install {{ item }}
      register: mas_install
      changed_when: "'already installed' not in mas_install.stderr"
      failed_when:
        - mas_install.rc != 0
        - "'already installed' not in mas_install.stderr"
      loop: "{{ appstore_apps }}"
      become: false
      when:
        - target_os == 'macos'
        - appstore_apps | length > 0
        - mas_availability.stdout == "found"
        - mas_account.stdout == "signed in"

    - name: Display App Store sign-in reminder
      ansible.builtin.debug:
        msg: "Mac App Store apps skipped - please sign into the App Store app and re-run installer"
      when:
        - target_os == 'macos'
        - appstore_apps | length > 0
        - mas_availability.stdout == "found"
        - mas_account.stdout != "signed in"

    - name: Update apt cache
      become: true
      ansible.builtin.command: apt-get update -y
      changed_when: false
      when:
        - target_os == 'linux'
        - package_manager == 'apt'
        - apt_packages | length > 0

    - name: Install apt packages
      become: true
      ansible.builtin.command: apt-get install -y {{ item }}
      register: apt_install
      changed_when: apt_install.rc == 0
      loop: "{{ apt_packages }}"
      when:
        - target_os == 'linux'
        - package_manager == 'apt'
        - apt_packages | length > 0
      notify: Update apt cache

    - name: Install dnf packages
      become: true
      ansible.builtin.command: dnf install -y {{ item }}
      register: dnf_install
      changed_when: dnf_install.rc == 0
      loop: "{{ dnf_packages }}"
      when:
        - target_os == 'linux'
        - package_manager == 'dnf'
        - dnf_packages | length > 0

    - name: Install pacman packages
      become: true
      ansible.builtin.command: pacman -S --noconfirm --needed {{ item }}
      register: pacman_install
      changed_when: "'There is nothing to do' not in pacman_install.stdout"
      loop: "{{ pacman_packages }}"
      when:
        - target_os == 'linux'
        - package_manager == 'pacman'
        - pacman_packages | length > 0

    - name: Install paru packages
      ansible.builtin.command: paru -S --noconfirm --needed {{ item }}
      register: paru_install
      changed_when: "'There is nothing to do' not in paru_install.stdout"
      loop: "{{ paru_packages }}"
      when:
        - target_os == 'linux'
        - package_manager == 'pacman'
        - paru_packages | length > 0

  handlers:
    - name: Update apt cache
      become: true
      ansible.builtin.command: apt-get update -y
      listen: Update apt cache
